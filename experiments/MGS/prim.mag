/*
   Some functions for exploring max IGS of primitive groups

   NOTE: Colva and Scott claim better bounds for primitive groups,
   so we now need to be more stringent in looking for exceptions.
*/


MyFactors := function (m)
     facs := Factorization (m);
     mfacs := [ ];
     for pair in facs do
          mfacs cat:= [ pair[1] : i in [1..pair[2]] ];
     end for;
return mfacs;
end function;

// this is an adaptation of Dimitri's recursive function that
// tests if <G> has a subgroup chain of length at least <len>
HasSubgroupChainOfLength := function (G, len)
     if len eq 0 then 
          return true;
     end if;
     maxes := MaximalSubgroups (G);
     ok := false;
     j := 1;
     while (not ok) and (j le #maxes) do
          if (#MyFactors (#maxes[j]`subgroup) ge (len - 1)) then
               ok := $$ (maxes[j]`subgroup, len - 1);
          end if;
          j +:= 1;
     end while;
     return ok;
end function;

PrintFile ("exceptions.txt", "primitive groups of degree n less than 87 that have subgroup chains bigger than 1 + n/2");
exceptions := [ ];
for n in [4..86] do
     num := NumberOfPrimitiveGroups (n);
     LIMIT := 1 + Floor(n/2);
     for i in [1..num-2] do
          G := PrimitiveGroup (n, i);
          if HasSubgroupChainOfLength (G, 1 + LIMIT) then
               PrintFile ("exceptions.txt", <[n,i], PrimitiveGroupDescription (n, i)>);
               Append (~exceptions, [n, i]);
          end if;
     end for;
end for;
//PrintFileMagma ("exceptions.txt", exceptions);

//test the groups with abelian socles
abelian := [ ];
exclude := [ ];
for x in exceptions do
     G := PrimitiveGroup (x[1], x[2]);
     n := x[1];
     LIMIT := 1 + Floor(n/2);
     N := Socle (G);
     if IsAbelian (N) then
          Append (~abelian, x);
          "x =", x;
          time pts := [ sub<N|a> : a in N | a ne Identity (N) ];
          // checks that mu'_G(N) = 1
          time assert forall { H : H in pts | NormalClosure (G, H) eq N };
          time L := G / N;
          time bad := HasSubgroupChainOfLength (L, LIMIT);
          if not bad then 
               Append (~exclude, x);
          end if;
     end if;
end for;

