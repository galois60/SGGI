function IsNew(G,S,t);
  GT := sub<G|t>;
  orders:={*Order(t[i]) : i in [1..#t]*};
  for x in S do
    ordersX:={*Order(x[i]) : i in [1..#x]*};
    if orders eq ordersX then
      ok, phi := IsConjugate(G,GT,sub<G|x>);
      if ok then
        s:=Sym(#t);
        for y in s do
          if IsHomomorphism(GT, GT, [x[i^y] : i in [1..#x]]^(phi^-1)) then
            return false;
          end if;
        end for;
      end if;
    end if;
  end for;
  return true;
end function;

function IsIGS(G,S)
  S := Set(S);
  for x in S do
    H:=sub<G|S diff {x}>;
    if x in H then 
      return false;
    end if;
   end for;
  return true;
end function;

function generate(G);
  c := ConjugacyClasses(G);
  gs := [];
  igs := [];
  for i := 2 to #c do
      Append(~gs,[c[i][3]]);
  end for;
  while #gs ne 0 do
    print "Extending", #gs, "IGS to rank",#(gs[1])+1;
    gsExtended := [];
    for i := 1 to #gs do
      Z := gs[i];
      S := sub<G|Z>;
      for x in G do
        if not(x in S) then
          if IsIGS(G,Z cat [x]) then
            if IsNew(G,gsExtended, Z cat [x]) then
              Append(~gsExtended, Z cat [x]);
            end if;
          end if;
        end if;
      end for;
    end for;
    // now checking which generate and save them
    gs := [];
    for x in gsExtended do
      if #sub<G|x> eq #G then
        Append(~igs, x);
      else
        Append(~gs, x);
      end if;
    end for;
  end while;
  return igs;
end function;

procedure saveGroup(G, filename);
  SetOutputFile(filename:Overwrite:=true);
  print "G := sub<Sym(",Degree(G),")|";
  for i := 1 to #Generators(G) -1 do
    print ElementToSequence(G.i),",";
  end for;
  print ElementToSequence(G.#Generators(G)),">;";
  UnsetOutputFile();
end procedure;

procedure saveIGS(G, igs, filename);
  ord := #igs[1];
  gens := "gens" cat IntegerToString(ord);
  SetOutputFile(filename : Overwrite:=false);
  print gens,":= [";
  for i := 1 to #igs do
    if i ne 1 then print ","; end if;
    gens := igs[i];
    for j := 1 to #gens do
      if j eq 1 then
        print "[G|";
      else 
        print ",";
      end if;
      print ElementToSequence(gens[j]);
    end for;
    print "]";
  end for;
  print "];";
  UnsetOutputFile();
end procedure;

/*
degStart := 6;
degEnd := 30;
for d := degStart to degEnd do
  for di:= 1 to NumberOfPrimitiveGroups(d)-2 do
    g:=PrimitiveGroupSims(d,di);
    print "Analysing PrimitiveGroupSims(",d,",",di,") ...";
    filename := "Primitive" cat IntegerToString(d) cat "-" cat IntegerToString(di) cat ".gens";
    saveGroup(g,filename);
    AutG:=g;
    G:=g;
    igs := generate(G);
    if #igs ne 0 then
      saveIGS(G, igs, filename);
    end if;
  end for;
end for;
*/

MyIGS := function (G)
  n := Ngens (G);
  isit := true;
  for i in [1..n] do 
    if G.i in sub < G | [ G.j : j in Remove([1..n], i) ] > then
      isit := false;
      "i=", i;
    end if;
  end for;
return isit;
end function;

/* -------- my code in progress for IGS search ------- */

isEquivalent := function (X, Y)
     basics := false;
     if Ngens (X) eq Ngens (Y) then 
       m := {* Order (X.j) : j in [1..Ngens (X)] *};
       if m eq {* Order (Y.j) : j in [1..Ngens (Y)] *} then
         if #X eq #Y then 
           basics := true;
         end if;
       end if;
     end if;
     if basics then 
          // try all homomorphisms between compatible tuples
          P := DirectProduct ([ SymmetricGroup (n) : n in Multiplicities (m) ]);
          P := [ g : g in P ];
          genX := [ ]; genY := [ ];
          for ord in Set (m) do
               genX cat:= [ X.j : j in [1..Ngens (X)] | Order (X.j) eq ord ];
               genY cat:= [ Y.j : j in [1..Ngens (Y)] | Order (Y.j) eq ord ];
          end for;
          iso := false;
          i := 0;
          XX := sub < Generic (X) | genX >;
          YY := sub < Generic (Y) | genY >;
          while (i lt #P) and (not iso) do 
               i +:= 1;
               s := P[i];
// NEED CONJUGACY HERE
               iso := IsHomomorphism (XX, YY, [ genY[j^s] : j in [1..#genY] ]);
          end while;
          if iso then 
               return true;
          else 
               return false;
          end if;
     else 
          return false;
     end if;
end function;

// procedure to replace the pointers in F with pointers to 
// orbit reps under the conjugation action of H
procedure orbitReps (~F, H, ELEMENTS) // '~' is optional, but helps readability for potential output
    build := [ ];
    reps := [ ];
    while #build lt #F do
         assert exists (p){ q : q in F | not q in build };
         Append (~reps, p);
         x := ELEMENTS[p];
         Cx := Conjugates (H, x);
         posCx := [ Position (ELEMENTS, y) : y in Cx ];
         build cat:= posCx;
    end while;
    F := reps;
end procedure;

isIndep := function (Y)
return forall { j : j in [1..Ngens (Y)] | 
                #sub<Y|[ Y.k : k in [1..Ngens (Y)] | k ne j ]> lt #Y };
end function;


maxIGS := function (G : Cardinality := 0)

     // list the elements of G once and for all
     // hopefully this is the most time consuming step
tt := Cputime ();
     ELTS := [ g : g in G ];
     N := #ELTS;
"time to list elements of G:", Cputime (tt);

     // set up working list WL
     // terms in WL are pairs [X, E], where
     // X is a subgroup of G with independent generators,
     // E is the list of extendable elements; pointers to ELTS 
tt := Cputime ();
     cl := ConjugacyClasses (G);
     WL := [ ];
     for i in [2..#cl] do 
          x := cl[i][3];
          X := sub < G | x >;
          // get elements not in X
          E := [ p : p in [1..N] | not ELTS[p] in X ];
          // refine this list to cut down the search
          C := Centralizer (G, X);
          orbitReps (~E, C, ELTS);
          Append (~WL, <X, E>);
     end for;
"time to initialize:", Cputime (tt);
 
     // set up the maximum IGS so far
     if exists(T){ S : S in WL | #S[1] eq N } then 
          max_so_far := [ T[1].j : j in [1..Ngens (T[1])] ];
     else 
          max_so_far := [ ];
     end if;

     STOP := false;

     // main loop 
     i := 0;
     while (not STOP) do

          i +:= 1;
          "there are", #WL, "items on the working list at the start of iteration", i;

          // remove redundancies
          old_WL := WL;
          WL := [ old_WL[1]] ;
          for j in [2..#old_WL] do
               new := forall { k : k in [1..#WL] | 
                       not isEquivalent (WL[k][1], old_WL[j][1]) };
               if new then 
                    Append (~WL, old_WL[j]);
               end if;
          end for;
          "after removing redundancies, there are", #WL, "items";
          "--------";

          new_WL := [ ];
    
          for i in [1..#WL] do

               // loop through the pairs in the working list
               X := WL[i][1];
               E := WL[i][2];

               // process this pair; three options:
               // (1) the new generator destroys independence. STOP
               // (2) the new generator gives an IGS for G. STOP
               // (3) the new generator gives an IGS for a proper subgroup. ADD
               for p in E do
                    y := ELTS[p];
                    Y := sub < G | [ X.j : j in [1..Ngens (X)] ] cat [y] >;
                    if isIndep (Y) then
                         if #Y eq N then   // update max_so_far
                              if Ngens (Y) gt #max_so_far then 
                                   max_so_far := [ Y.j : j in [1..Ngens (Y)] ];
                              end if;
                         else
                              EY := [ p : p in [1..N] | not ELTS[p] in Y ];
                              // refine this list to cut down the search
                              CY := Centralizer (G, Y);
                              orbitReps (~EY, CY, ELTS);
                              Append (~new_WL, <Y, EY>);
                         end if;
                    end if;
                end for;

          end for;

          if #new_WL eq 0 then 
               STOP := true;
          else 
               WL := new_WL;
          end if;

     end while;

return max_so_far;
end function;


// small example to test pieces of the code

/*
G := SymmetricGroup (6);

ttt := Cputime ();
S1 := maxIGS (G);
"time for PB:", Cputime (ttt);

ttt := Cputime ();
S2 := generate (G);
"time for DL:", Cputime (ttt);
*/

G := SymmetricGroup (6);
time S := maxIGS (G);




