function IsNew(G,S,t);
  GT := sub<G|t>;
  orders:={*Order(t[i]) : i in [1..#t]*};
  for x in S do
    ordersX:={*Order(x[i]) : i in [1..#x]*};
    if orders eq ordersX then
      ok, phi := IsConjugate(G,GT,sub<G|x>);
      if ok then
        s:=Sym(#t);
        for y in s do
          if IsHomomorphism(GT, GT, [x[i^y] : i in [1..#x]]^(phi^-1)) then
            return false;
          end if;
        end for;
      end if;
    end if;
  end for;
  return true;
end function;

function IsIGS(G,S)
  S := Set(S);
  for x in S do
    H:=sub<G|S diff {x}>;
    if x in H then 
      return false;
    end if;
   end for;
  return true;
end function;

function generate(G);
  rankMin := Truncate(Degree(G)/2)+2;
  c := ConjugacyClasses(G);
  gs := [];
  igs := [];
  for i := 2 to #c do
      Append(~gs,[c[i][3]]);
  end for;
  while #gs ne 0 do
    print "Extending to rank ",#(gs[1])+1;
    gsExtended := [];
    for i := 1 to #gs do
      Z := gs[i];
      S := sub<G|Z>;
      for x in G do
        if not(x in S) then
          if IsIGS(G,Z cat [x]) then
            if IsNew(G,gsExtended, Z cat [x]) then
              Append(~gsExtended, Z cat [x]);
            end if;
          end if;
        end if;
      end for;
    end for;
    // now checking which generate and save them
    gs := [];
    for x in gsExtended do
      if #sub<G|x> eq #G then
        if #x ge rankMin then
          Append(~igs, x);
        end if;
    else
        c := 0;
        s := Factorization(Index(G,sub<G|x>));
        for x in s do
          c := c+x[2];
        end for;
        if c ge rankMin-#x then
          Append(~gs, x);
        end if;
      end if;
    end for;
  end while;
  return igs;
end function;