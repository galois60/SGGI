/*
  Check that various configurations of 2-transpositions
  in Alt(n) do not produce C-groups for Alt(n)
*/

/*
     n = degree of big alternating group
     v = label of vertex we attach tree to
     k = number of vertices in tree
     s = label of first vertex not equal to v
*/
__all_trees := function (n, v, k, s)
     assert k ge 1;
     if k eq 1 then 
          return [ [] ];
     end if;
     G := AlternatingGroup (n);
     trees := [ [ G!(1,2)(v,s) ] ];
     for j in [3..k] do
          otrees := trees;
          edges := [ G!(1,2)(a,s+j-2) : a in [v] cat [s..s+j-3] ];
          trees := [ ];
          for T in otrees do
               for e in edges do
                    Append (~trees, T cat [e]);
               end for;
          end for;
     end for;  
return trees;
end function;

__three_partitions := function (m)
     parts := [ ];
     for a in [0..m] do 
          for b in [0..m-a] do 
               Append (~parts, [a, b, m-a-b]);
          end for;
     end for;
return parts;
end function;

// basketball + square
AllBSGroups := function (n)

     assert n ge 6;
     An := AlternatingGroup (n);
     
     // make base square
     square_gens := [ An!(2,5)(3,4) , An!(2,3)(4,5) ];

     // create all 3-part partitions of n-5
     parts := __three_partitions (n-5);

     // build and check all attaching tree configurations

     ts := [ ];

     for p in parts do

          pts := [ ];

          for i in [1,2,3] do
               v := 2 + i;
               k := 1 + p[i];
               if i eq 1 then 
                    s := 6; 
                else 
                    s := 6 + &+ [ p[j] : j in [1..[i-1] ] ]; 
                end if;
                pts[i] := __all_trees (n, v, k, s);
          end for;

          Append (~ts, pts);
          
     end for;

     // build the generating sequences and check
     proper_subgp := [ ];
     not_C_group := [ ];
     C_group := [ ];
     for SEQ in ts do 
          for T1 in SEQ[1] do
               for T2 in SEQ[2] do 
                    for T3 in SEQ[3] do 
                         H := sub < An | square_gens cat T1 cat T2 cat T3 >;
                         if #H lt #An then 
                              Append (~proper_subgp, H);
                         end if;
                         if IsCGroup (H) then
                              Append (~C_group, H);
                         else
                              Append (~not_C_group, H);
                         end if;
                    end for;
                end for;
          end for;
     end for;

return C_group, not_C_group, proper_subgp;
end function;

// Alt(6) example
A7 := AlternatingGroup (7);
G := sub < A7 | (1,3)(2,6) , (2,3)(1,4) , (1,2)(3,5) , (1,3)(5,7) >;

H := sub < G | G.2 , G.3 , G.4 >;
J := sub < G | G.1 , G.2 , G.4 >;
HJ := sub < G | G.2 , G.4 >;
H meet J eq HJ;


// commuting square
n := 8;
An := AlternatingGroup (n);
square := [ An!(2,3)(4,5) , An!(2,5)(3,4) ];

// attach to 3 corner 
trees := __all_trees (n, 3, 4, 6);
groups3 := [ ];
for T in trees do 
     G := sub < An | square , T >;
     Append (~groups3, G);
     "G is a C-group?", IsCGroup (G);
     G134 := sub < G | G.1 , G.3 , G.4 >;
     G135 := sub < G | G.1 , G.3 , G.5 >;
     G13  := sub < G | G.1 , G.3 >;
     "selective IP?", G13 eq (G134 meet G135);
end for;

// attach to 4 corner 
trees := __all_trees (n, 4, 4, 6);
groups4 := [ ];
for T in trees do 
     G := sub < An | square , T >;
     Append (~groups4, G);
     "G is a C-group?", IsCGroup (G);
     G134 := sub < G | G.1 , G.3 , G.4 >;
     G135 := sub < G | G.1 , G.3 , G.5 >;
     G13  := sub < G | G.1 , G.3 >;
     "selective IP?", G13 eq (G134 meet G135);
     [#G134, #G135, #G13, #(G134 meet G135)];
end for;

MyCompLength := function (G);
return #CompositionSeries (G) - 1;
end function;

// check primitive groups
for n in [4..24] do
"processing primitive groups of degree", n;
"floor (n/2) - 1 =", Floor (n/2) - 1;
"composition lengths:", [ MyCompLength (G) : G in PrimitiveGroups (n) ];
"-------";
end for;






