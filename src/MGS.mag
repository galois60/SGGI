/*
   Functions to help find a largest possible independent set within a group.
*/

// Find the maximum length of a subgroup chain in a group
// Keep this one on the back-burner for now because Dimitri's recurive function if faster
MyChainLength := function (G)
     // if the lattice is very large, this first step will be a problem
     L := SubgroupLattice (G);
     // the last group listed in the lattice should be G,
     // and the first group should be the identity
     assert (L[#L] eq G) and (L[1] eq sub<G|Identity(G)>);
     depths := [ 0 : i in [1..#L] ];
     rem := {1..#L};
     while #rem gt 0 do
          k := Max (rem);
          Exclude (~rem, k);
          M := MaximalSubgroups (L!k);
          for m in M do 
               mi := Integers ()!m;
               depths[mi] := Max (1 + depths[k], depths[mi]);
          end for;
     end while;
     // the identity subgroup must be at the end of any longest chain
     assert forall { i : i in [2..#L] | depths[1] ge depths[i] };
return depths[1];
end function;

MyFactors := function (m)
     facs := Factorization (m);
     mfacs := [ ];
     for pair in facs do
          mfacs cat:= [ pair[1] : i in [1..pair[2]] ];
     end for;
return mfacs;
end function;

// this is an adaptation of Dimitri's recursive function that
// tests if <G> subgroup chain of length at least <len>
HasSubgroupChainOfLength := function (G, len)
     if len eq 0 then 
          return true;
     end if;
     maxes := MaximalSubgroups (G);
     ok := false;
     j := 1;
     while (not ok) and (j le #maxes) do
          if (#MyFactors (#maxes[j]`subgroup) ge (len - 1)) then
               ok := $$ (maxes[j]`subgroup, len - 1);
          end if;
          j +:= 1;
     end while;
     return ok;
end function;

// use Dimitri's recursive test to find the actual chain length of a finite group G
intrinsic MaxLengthSubgroupChain (G::Grp) -> RngIntElt
  { Length of a longest subgroup chain in G. }

     if #G eq 1 then 
          return 0;
     end if;

     LOWER := 1;
     UPPER := 1 + Floor (Log (2, #G));

     // carry out binary search 
     while (1 + LOWER) lt UPPER do 

          MID := (LOWER + UPPER) div 2;

          if HasSubgroupChainOfLength (G, MID) then
               LOWER := MID;
          else 
               UPPER := MID;
          end if;

     end while;

return LOWER;

end intrinsic;

